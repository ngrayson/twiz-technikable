/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define TBLE_ORTHO   true

#define BAS_L 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

#define ES_TSK &mt 
#define DOT_PR LT(0,KC_2)
#define COM_PR LT(0,KC_3)
#define TABL LT(0,KC_F1)
#define TABR LT(0,KC_F2)
#define TABCLOSE LT(0,KC_F3)
#define PLS_MIN LT(0,KC_F4)
#define RE_CACHE LT(0,KC_F5)
#define QUIT LT(0,KC_6)
#define MEN_AST LT(0,KC_TAB)
#define FOC_1 LT(0,KC_A)
#define FOC_2 LT(0,KC_S)
#define FOC_3 LT(0,KC_D)
#define FOC_4 LT(0,KC_F)
#define AUD_5 LT(0,KC_H) // 6 on tap, toggle audio source on hold
#define TD_RD LT(0,KC_G) // macro for labelling in gmail
#define WT_SV LT(0,KC_J) // macro for labelling in gmail
#define ABRC LT(0,KC_K) // Brackets (ambidexterous)
#define LNKPST LT(0,KC_L) // hyperlink and paste clipboard


#define DRK_BANG LT(0,KC_Z)
#define VIS_HASH LT(0,KC_C)
#define TAB_RES LT(0,KC_ESC)
#define ALT_TAB LT(0, KC_F22) // alt tab with timeout functionality
#define SHALTAB LT(0, KC_F21) // when held: shift, when tapped: alt tab with timeout functionality
#define KVMONE LT(0,KC_LGUI)
#define KVMTWO LT(0,KC_RGUI)




#define VDLEFT LGUI(LCTL(KC_LEFT))
#define VDRIGHT LGUI(LCTL(KC_RIGHT))
#define SNAPUP LGUI(KC_UP)
#define SNAPLEFT LGUI(KC_LEFT)
#define SNAPDOWN LGUI(KC_DOWN)
#define SNAPRIGHT LGUI(KC_RIGHT)
#define LOCK LGUI(KC_L)
#define MAXIMIZE HYPR(KC_M)
#define AUDIOSRC MEH(KC_G)
#define PIK_WIN LCA(KC_TAB)
#define VDTVIEW LGUI(KC_TAB)
#define SH_TAB LSFT_T(KC_TAB)
#define SSNIP LGUI(LSFT(KC_S)) // GUI+SHIFT+S for snipping tool
#define SH_SLS RSFT_T(KC_SLSH)

#define CLFT LCTL(KC_LEFT)
#define CRGT LCTL(KC_RIGHT)
#define CUP LCTL(KC_UP)
#define CDN LCTL(KC_DOWN)

/ {
    chosen {
       zmk,matrix_transform =
                       &ortho_transform;
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp ESC    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp PLUS
 &kp LSHFT  &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp QUOT
 &kp LCTRL  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RSHFT
                       &mo RAISE  &kp LALT    &mo LOWER      &kp SPACE      &kp BSPC         &kp RET        &kp RGUI    &kp DEL
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &kp DEL
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
&bt BT(0)  &bt BT(1)  &bt BT(2) &bt BT(3)    &bt BT(4)       &trans       &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV    &trans         &trans       &trans       &trans     &trans
&trans     &kp SEMI   &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT    &trans         &trans       &trans       &trans     &trans
&trans     &kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans        &trans         &trans       &trans       &trans     &trans
                     &trans     &kp N0      &kp MINUS    &none         &none     &kp ESC        &kp DEL      &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans     &trans    &trans       &trans       &trans     &trans
                      &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

    };
};

